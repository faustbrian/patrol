<?php declare(strict_types=1);

/**
 * Copyright (C) Brian Faust
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Patrol\Core\ValueObjects;

use function array_column;

/**
 * Primary key type for database tables.
 *
 * Defines the supported primary key generation strategies for Patrol's
 * database tables. Each type provides different characteristics for
 * distributed systems, performance, and sortability requirements.
 *
 * @author Brian Faust <brian@cline.sh>
 */
enum PrimaryKeyType: string
{
    /**
     * Auto-incrementing integer primary keys.
     *
     * Traditional sequential integer IDs generated by the database.
     * Provides smallest storage footprint and fastest joins, but
     * can expose information about record counts and creation order.
     * Not recommended for distributed systems.
     */
    case AutoIncrement = 'autoincrement';

    /**
     * Universally unique identifiers (UUID v4).
     *
     * 128-bit random identifiers that are globally unique without
     * coordination. Suitable for distributed systems and prevents
     * enumeration attacks. Larger storage footprint than integers.
     */
    case Uuid = 'uuid';

    /**
     * Universally unique lexicographically sortable identifiers.
     *
     * 128-bit identifiers combining timestamp and randomness, providing
     * both global uniqueness and natural time-based sorting. Ideal for
     * distributed systems requiring chronological ordering without
     * additional timestamp columns.
     */
    case Ulid = 'ulid';

    /**
     * Get all valid primary key type values.
     *
     * Returns the string values of all available primary key types for validation,
     * configuration processing, or displaying available options to users.
     *
     * @return array<string> Array of primary key type values: ['autoincrement', 'uuid', 'ulid']
     */
    public static function values(): array
    {
        return array_column(self::cases(), 'value');
    }
}
